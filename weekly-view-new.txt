{/* Weekly view */}
{viewMode === "weekly" && (
  <div className="bg-white rounded-lg border p-4">
    <div className="flex justify-between items-center mb-4">
      <Button 
        variant="ghost" 
        size="sm" 
        onClick={() => setWeekOffset(prev => prev - 1)}
      >
        <ChevronLeft className="h-5 w-5" />
      </Button>
      <div className="text-center">
        <div className="text-xl font-bold">
          {format(weekDates[0], 'MMMM d')} - {format(weekDates[6], 'MMMM d, yyyy')}
        </div>
        <div className="text-sm text-muted-foreground">
          Week {weekOffset === 0 ? '(Current)' : weekOffset > 0 ? `+${weekOffset}` : weekOffset}
        </div>
      </div>
      <Button 
        variant="ghost" 
        size="sm" 
        onClick={() => setWeekOffset(prev => prev + 1)}
      >
        <ChevronRight className="h-5 w-5" />
      </Button>
    </div>
    
    {/* Sortable habit list - weekly view (table style) */}
    <DndContext 
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragEnd={handleDragEnd}
    >
      {filterCategory === "all" ? (
        <div className="space-y-8">
          {/* Absolute habits section */}
          {filteredHabits.filter(h => h.isAbsolute).length > 0 && (
            <div>
              <div className="flex justify-between items-center mb-2">
                <div className="font-medium text-lg">
                  Daily Absolute Habits
                </div>
                <Badge variant="outline" className="font-normal">
                  {filteredHabits.filter(h => h.isAbsolute).length} habits
                </Badge>
              </div>
              
              {/* Table header */}
              <div className="grid grid-cols-[2fr_repeat(7,1fr)] text-xs font-medium text-muted-foreground mb-2">
                <div className="px-3">Habit</div>
                {weekDates.map((date, i) => (
                  <div key={i} className="text-center">
                    {format(date, 'EEE')}
                    <span className="block">{format(date, 'd')}</span>
                  </div>
                ))}
              </div>
              
              <SortableContext 
                items={filteredHabits.filter(h => h.isAbsolute).map(h => h.id)}
                strategy={verticalListSortingStrategy}
              >
                {filteredHabits.filter(h => h.isAbsolute).map(habit => (
                  <div key={habit.id} className="border-t py-2 grid grid-cols-[2fr_repeat(7,1fr)] items-center">
                    <div className="flex items-center gap-2 px-3 py-2">
                      <span className="text-lg" style={{ color: habit.iconColor || '#4299e1' }}>
                        {habitIcons[habit.icon] || '⚪'}
                      </span>
                      <div>
                        <div className="font-medium">{habit.title}</div>
                        <div className="text-xs text-muted-foreground">
                          {habit.category && (
                            <span className="px-1.5 py-0.5 bg-slate-100 rounded text-slate-600 mr-1">
                              {habit.category}
                            </span>
                          )}
                          <span>0/7 daily</span>
                        </div>
                      </div>
                    </div>
                    
                    {/* Weekday cells */}
                    {weekDates.map((date, i) => {
                      const isCompleted = isHabitCompletedOnDate(habit.id, date);
                      return (
                        <div key={i} className="flex justify-center">
                          <Button
                            variant="ghost"
                            size="icon"
                            className={`rounded-full w-8 h-8 ${
                              isCompleted ? 'text-blue-500' : 'text-slate-300'
                            }`}
                            onClick={() => onToggleHabit(habit.id, date)}
                          >
                            {isCompleted ? (
                              <CheckCircle className="h-6 w-6 fill-blue-500 text-white" />
                            ) : (
                              <Circle className="h-6 w-6" />
                            )}
                          </Button>
                        </div>
                      );
                    })}
                  </div>
                ))}
              </SortableContext>
            </div>
          )}
          
          {/* Additional habits section */}
          {filteredHabits.filter(h => !h.isAbsolute).length > 0 && (
            <div>
              <div className="flex justify-between items-center mb-2">
                <div className="font-medium text-lg">
                  Additional Habits
                </div>
                <Badge variant="outline" className="font-normal">
                  {filteredHabits.filter(h => !h.isAbsolute).length} habits
                </Badge>
              </div>
              
              {/* Table header */}
              <div className="grid grid-cols-[2fr_repeat(7,1fr)] text-xs font-medium text-muted-foreground mb-2">
                <div className="px-3">Habit</div>
                {weekDates.map((date, i) => (
                  <div key={i} className="text-center">
                    {format(date, 'EEE')}
                    <span className="block">{format(date, 'd')}</span>
                  </div>
                ))}
              </div>
              
              <SortableContext 
                items={filteredHabits.filter(h => !h.isAbsolute).map(h => h.id)}
                strategy={verticalListSortingStrategy}
              >
                {filteredHabits.filter(h => !h.isAbsolute).map(habit => (
                  <div key={habit.id} className="border-t py-2 grid grid-cols-[2fr_repeat(7,1fr)] items-center">
                    <div className="flex items-center gap-2 px-3 py-2">
                      <span className="text-lg" style={{ color: habit.iconColor || '#4299e1' }}>
                        {habitIcons[habit.icon] || '⚪'}
                      </span>
                      <div>
                        <div className="font-medium">{habit.title}</div>
                        <div className="text-xs text-muted-foreground">
                          {habit.category && (
                            <span className="px-1.5 py-0.5 bg-slate-100 rounded text-slate-600 mr-1">
                              {habit.category}
                            </span>
                          )}
                          <span>{countCompletedDaysInWeek(habit.id)}/{habit.frequency.split('x')[0]} {habit.frequency.split('-')[1]}</span>
                        </div>
                      </div>
                    </div>
                    
                    {/* Weekday cells */}
                    {weekDates.map((date, i) => {
                      const isCompleted = isHabitCompletedOnDate(habit.id, date);
                      return (
                        <div key={i} className="flex justify-center">
                          <Button
                            variant="ghost"
                            size="icon"
                            className={`rounded-full w-8 h-8 ${
                              isCompleted ? 'text-blue-500' : 'text-slate-300'
                            }`}
                            onClick={() => onToggleHabit(habit.id, date)}
                          >
                            {isCompleted ? (
                              <CheckCircle className="h-6 w-6 fill-blue-500 text-white" />
                            ) : (
                              <Circle className="h-6 w-6" />
                            )}
                          </Button>
                        </div>
                      );
                    })}
                  </div>
                ))}
              </SortableContext>
            </div>
          )}
        </div>
      ) : (
        // For other filter categories, show all habits without sections
        <div>
          {/* Table header */}
          <div className="grid grid-cols-[2fr_repeat(7,1fr)] text-xs font-medium text-muted-foreground mb-2">
            <div className="px-3">Habit</div>
            {weekDates.map((date, i) => (
              <div key={i} className="text-center">
                {format(date, 'EEE')}
                <span className="block">{format(date, 'd')}</span>
              </div>
            ))}
          </div>
          
          <SortableContext 
            items={filteredHabits.map(h => h.id)}
            strategy={verticalListSortingStrategy}
          >
            {filteredHabits.map(habit => (
              <div key={habit.id} className="border-t py-2 grid grid-cols-[2fr_repeat(7,1fr)] items-center">
                <div className="flex items-center gap-2 px-3 py-2">
                  <span className="text-lg" style={{ color: habit.iconColor || '#4299e1' }}>
                    {habitIcons[habit.icon] || '⚪'}
                  </span>
                  <div>
                    <div className="font-medium">{habit.title}</div>
                    <div className="text-xs text-muted-foreground">
                      {habit.category && (
                        <span className="px-1.5 py-0.5 bg-slate-100 rounded text-slate-600 mr-1">
                          {habit.category}
                        </span>
                      )}
                      <span>
                        {countCompletedDaysInWeek(habit.id)}/
                        {habit.isAbsolute ? '7 daily' : `${habit.frequency.split('x')[0]} ${habit.frequency.split('-')[1]}`}
                      </span>
                    </div>
                  </div>
                </div>
                
                {/* Weekday cells */}
                {weekDates.map((date, i) => {
                  const isCompleted = isHabitCompletedOnDate(habit.id, date);
                  return (
                    <div key={i} className="flex justify-center">
                      <Button
                        variant="ghost"
                        size="icon"
                        className={`rounded-full w-8 h-8 ${
                          isCompleted ? 'text-blue-500' : 'text-slate-300'
                        }`}
                        onClick={() => onToggleHabit(habit.id, date)}
                      >
                        {isCompleted ? (
                          <CheckCircle className="h-6 w-6 fill-blue-500 text-white" />
                        ) : (
                          <Circle className="h-6 w-6" />
                        )}
                      </Button>
                    </div>
                  );
                })}
              </div>
            ))}
          </SortableContext>
        </div>
      )}
    </DndContext>
  </div>
)}